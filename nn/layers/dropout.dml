/*
 * Dropout layer.
 */
forward = function(matrix[double] X, double p, int seed)
    return (matrix[double] out, matrix[double] mask) {
  /*
   * Computes the forward pass for an inverted dropout layer.
   *
   * Drops the inputs element-wise with a probability p, and divides
   * by p to maintain the expected values of those inputs (which are
   * the outputs of neurons) at test time.
   *
   * Inputs:
   *  - X: Input data matrix, of shape (any, any).
   *  - p: Probability of keeping a neuron output.
   *  - seed: [Optional: -1] Random number generator seed.  Setting this
   *      allows for deterministic evaluation.  Set to -1 for a random
   *      seed.
   *
   * Outputs:
   *  - out: Ouptuts, of same shape as X.
   *  - mask: Dropout mask used to compute the output.
   */
  # Normally, we might use something like
  #    `mask = rand(rows=nrow(X), cols=ncol(X), min=0, max=1, seed=seed) <= p`
  # to create a dropout mask.  Fortunately, SystemML has a `sparsity` parameter on
  # the `rand` function that allows use to create a mask directly.
  if (seed == -1) {
    mask = rand(rows=nrow(X), cols=ncol(X), min=1, max=1, sparsity=p)
  }
  else {
    mask = rand(rows=nrow(X), cols=ncol(X), min=1, max=1, sparsity=p, seed=seed)
  }
  out = X * mask / p
}

backward = function(matrix[double] dout, matrix[double] X, double p, matrix[double] mask)
    return (matrix[double] dX) {
  /*
   * Computes the backward pass for an inverted dropout layer.
   *
   * Applies the mask to the upstream gradient, and divides by p to
   * maintain the expected values at test time.
   *
   * Inputs:
   *  - dout: Derivatives from upstream, of same shape as X.
   *  - X: Previous input data matrix, of shape (any, any).
   *  - p: Previous probability of keeping a neuron output.
   *  - mask: Previous dropout mask used to compute the output.
   *
   * Outputs:
   *  - dX: Gradient wrt X, of same shape as X.
   */
  dX = mask / p * dout
}

