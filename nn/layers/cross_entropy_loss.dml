/*
 * Cross-entropy loss function.
 */

forward = function(matrix[double] pred, matrix[double] y)
    return (double loss) {
  /*
   * Computes the forward pass for a cross-entropy loss function.  The
   * inputs consist of N examples, each with K dimensions corresponding
   * to normalized probabilities of K classes.
   *
   *   ```
   *   L_i = -y_i^T * log(pred_i)
   *   L = (1/N) sum(L_i) for i=1 to N
   *   ```
   *
   * In these equations, `L` is the total loss, `L_i` is the loss for
   * example `i`, `y_i` is the K-dimensional vector of target class
   * probabilities, `pred_i` is K-dimensional vector of predicted
   * class probabilities, and `N` is the number of examples.
   *
   * This can be interpreted as the negative log-likelihood assuming
   * a Bernoulli distribution generalized to K dimensions, or a
   * Multinomial with one observation.
   *
   * Inputs:
   *  - pred: Predictions, of shape (N, K).
   *  - y: Targets, of shape (N, K).
   *
   * Outputs:
   *  - loss: Average loss.
   */
  N = nrow(y)
  eps = 1e-10  # numerical stability to avoid log(0)
  losses = rowSums(-y * log(pred+eps))
  loss = sum(losses) / N
}

backward = function(matrix[double] pred, matrix[double] y)
    return (matrix[double] dpred) {
  /*
   * Computes the backward pass of a cross-entropy loss function.  The
   * inputs consist of N examples, each with K dimensions corresponding
   * to normalized probabilities of K classes.
   *
   * Inputs:
   *  - pred: Predictions, of shape (N, K).
   *  - y: Targets, of shape (N, K).
   *
   * Outputs:
   *  - dpred: Gradient wrt `pred`, of shape (N, K).
   */
  N = nrow(y)
  eps = 1e-10  # numerical stability to avoid divide-by-zero
  dpred = (1/N) * -y * (1/(pred+eps))
}

