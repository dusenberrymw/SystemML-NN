/*
 * Sigmoid nonlinearity layer.
 */

forward = function(matrix[double] X)
    return (matrix[double] out) {
  /*
   * Computes the forward pass for a sigmoid nonlinearity layer.
   *
   *   `sigmoid(x) = 1 / (1 + e^-x)`
   *
   * If `X` contains a single feature column, the output of a sigmoid
   * layer can be interpreted as a predicted probability of a true
   * class when paired with a log loss function in a binary
   * classification problem.
   *
   * Inputs:
   *  - X: Inputs, of shape (any, any).
   *
   * Outputs:
   *  - out: Outputs, of same shape as `X`.
   */
  out = 1 / (1+exp(-X))
}

backward = function(matrix[double] dout, matrix[double] X)
    return (matrix[double] dX) {
  /*
   * Computes the backward pass for a sigmoid nonlinearity layer.
   *
   * Inputs:
   *  - dout: Gradient wrt `out` from upstream, of same shape as `X`.
   *  - X: Inputs, of shape (any, any).
   *
   * Outputs:
   *  - dX: Gradient wrt `X`, of same shape as `X`.
   */
  out = 1 / (1+exp(-X))
  dX = out * (1-out) * dout
}

