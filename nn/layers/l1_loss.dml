/*
 * L1 loss function.
 *
 * L_i = sum_j(abs((pred_i)_j - (y_i)_j)) for all j.
 * L = (1/N) sum(L_i) for i=1 to N, where N is the number of examples.
 */
forward = function(matrix[double] pred, matrix[double] y) 
    return (double loss) {
  /*
   * Computes the forward pass for an L1 loss function.  The inputs
   * consist of N examples, each with M dimensions to predict.
   *
   * Inputs:
   *  - pred: Prediction matrix, of shape (N, M).
   *  - y: Target matrix, of shape (N, M).
   *
   * Outputs:
   *  - loss: Scalar loss, of shape (1).
   */
  N = nrow(y)
  losses = rowSums(abs(pred - y))
  loss = sum(losses) / N
}

backward = function(matrix[double] pred, matrix[double] y) 
    return (matrix[double] dpred) {
  /*
   * Computes the backward pass for an L1 loss function.  The inputs
   * consist of N examples, each with M dimensions to predict.
   *
   * Inputs:
   *  - pred: Prediction matrix, of shape (N, M).
   *  - y: Target matrix, of shape (N, M).
   *
   * Outputs:
   *  - dpred: Gradient wrt pred, of shape (N, M).
   */
  N = nrow(y)
  dpred = sign(pred - y) / N
}

