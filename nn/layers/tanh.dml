/*
 * Tanh nonlinearity layer.
 */
source("nn/layers/sigmoid.dml") as sigmoid

forward = function(matrix[double] X)
    return (matrix[double] out) {
  /*
   * Computes the forward pass for a tanh nonlinearity layer.
   *
   *   ```
   *   tanh(x) = (e^x - e^-x) / (e^x + e^-x)
   *           = 2 * sigmoid(2x) - 1
   *   ```
   *
   * Inputs:
   *  - X: Inputs, of shape (any, any).
   *
   * Outputs:
   *  - out: Outputs, of same shape as `X`.
   */
  # out = (exp(X) - exp(-X)) / (exp(X) + exp(-X))
  # Simplification of the above formulation to use the sigmoid function:
  sigma2X = sigmoid::forward(2*X)
  out = 2*sigma2X - 1
}

backward = function(matrix[double] dout, matrix[double] X)
    return (matrix[double] dX) {
  /*
   * Computes the backward pass for a tanh nonlinearity layer.
   *
   * Inputs:
   *  - dout: Gradient wrt `out` from upstream, of same shape as `X`.
   *  - X: Inputs, of shape (any, any).
   *
   * Outputs:
   *  - dX: Gradient wrt `X`, of same shape as `X`.
   */
  sigma2X = sigmoid::forward(2*X)
  out = 2*sigma2X - 1
  dX = (1-out^2) * dout
}

