/*
 * Max pooling layer.
 *
 * This implementation is intended to be a simple, reference version.
 */
forward = function(matrix[double] X, int C, int Hin, int Win, int Hf, int Wf,
                   int strideh, int stridew)
    return (matrix[double] out, int Hout, int Wout) {
  /*
   * Computes the forward pass for a 2D spatial max pooling layer.
   * The input data has N examples, each represented as a 3D volume
   * unrolled into a single vector.
   *
   * This implementation is intended to be a simple, reference version.
   *
   * Inputs:
   *  - X: Input data matrix, of shape (N, C*Hin*Win).
   *  - C: Number of input channels (dimensionality of input depth).
   *  - Hin: Input height.
   *  - Win: Input width.
   *  - Hf: Filter height.
   *  - Wf: Filter width.
   *  - strideh: Stride over height.
   *  - stridew: Stride over width.
   *
   * Outputs:
   *  - out: Outputs, of shape (N, C*Hout*Wout).
   *  - Hout: Output height.
   *  - Wout: Output width.
   */
  N = nrow(X)
  Hout = as.integer((Hin - Hf) / strideh + 1)
  Wout = as.integer((Win - Wf) / stridew + 1)

  # Create output volume
  out = matrix(0, rows=N, cols=C*Hout*Wout)  

  # Max pooling
  parfor (n in 1:N, check=0) {  # all examples
    img = matrix(X[n,], rows=C, cols=Hin*Win)
    parfor (c in 1:C, check=0) {  # all channels
      img_slice = matrix(img[c,], rows=Hin, cols=Win)
      parfor (hout in 1:Hout, check=0) {  # all output rows
        hin = (hout-1) * strideh + 1
        parfor (wout in 1:Wout, check=0) {  # all output columns
          win = (wout-1) * stridew + 1
          out[n, (c-1)*Hout*Wout + (hout-1)*Wout + wout] =
            max(img_slice[hin:hin+Hf-1, win:win+Wf-1])
        }
      }
    }
  }
}

backward = function(matrix[double] dout, int Hout, int Wout, matrix[double] X, int C, 
                    int Hin, int Win, int Hf, int Wf, int strideh, int stridew)
    return (matrix[double] dX) {
  /*
   * Computes the backward pass for a 2D spatial max pooling layer.
   * The input data has N examples, each represented as a 3D volume
   * unrolled into a single vector.
   *
   * Inputs:
   *  - dout: Derivatives from upstream, of shape (N, C*Hout*Wout).
   *  - Hout: Output height.
   *  - Wout: Output width.
   *  - X: Input data matrix, of shape (N, C*Hin*Win).
   *  - C: Number of input channels (dimensionality of input depth).
   *  - Hin: Input height.
   *  - Win: Input width.
   *  - Hf: Filter height.
   *  - Wf: Filter width.
   *  - strideh: Stride over height.
   *  - stridew: Stride over width.
   *
   * Outputs:
   *  - dX: Gradient wrt X, of shape (N, C*Hin*Win).
   */
  N = nrow(X)
  
  # Create gradient volume
  dX = matrix(0, rows=N, cols=C*Hin*Win)
  
  # Gradient of max pooling
  parfor (n in 1:N, check=0) {  # all examples
    img = matrix(X[n,], rows=C, cols=Hin*Win)
    dimg = matrix(0, rows=C, cols=Hin*Win)
    parfor (c in 1:C, check=0) {  # all channels
      img_slice = matrix(img[c,], rows=Hin, cols=Win)
      dimg_slice = matrix(0, rows=Hin, cols=Win)
      for (hout in 1:Hout, check=0) {  # all output rows
        hin = (hout-1) * strideh + 1
        for (wout in 1:Wout) {  # all output columns
          win = (wout-1) * stridew + 1
          img_slice_patch = img_slice[hin:hin+Hf-1, win:win+Wf-1]
          max_val = max(img_slice_patch)
          max_val_ind = ppred(img_slice_patch, max_val, "==")  # max value indicator
          # gradient passes through only for the max value in this patch
          dimg_slice_patch = max_val_ind * dout[n, (c-1)*Hout*Wout + (hout-1)*Wout + wout]
          dimg_slice[hin:hin+Hf-1, win:win+Wf-1] =
            dimg_slice[hin:hin+Hf-1, win:win+Wf-1] + dimg_slice_patch
        }
      }
      dimg[c,] = matrix(dimg_slice, rows=1, cols=Hin*Win)
    }
    dX[n,] = matrix(dimg, rows=1, cols=C*Hin*Win)
  }
}

